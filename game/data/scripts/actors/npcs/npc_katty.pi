class Actor implements NPC
{
	properties:    	
		KIN_QUIET = 0;
		KIN_SPEAK = 0;
		KIN_SIT_QUIET = 0;
		KIN_SIT_SPEAK = 0;
		
	virtual Init ()
	{
		StartLoadResources ();
		
		Actor_SetNumLODS (this, 1);
		Actor_LoadMesh (this, 0, "npc_katty.msh");
		
		KIN_QUIET = Actor_LoadKinematic (this, "npc_katty_quiet.kin");
		KIN_SPEAK = Actor_LoadKinematic (this, "npc_katty_speak.kin");                                            
		KIN_SIT_QUIET = Actor_LoadKinematic (this, "npc_katty_sit_quiet.kin");
		KIN_SIT_SPEAK = Actor_LoadKinematic (this, "npc_katty_sit_speak.kin");                                            
		
		EndLoadResources ();
		
		name = "npc_katty";
		collide = true;
		useAngles = 0;
		Scene_AddStatic (scene, this);
		bMoveHead = true;
		
		voiceID = VOICE_GIRL;
	}

	virtual Start ()
	{
		switch (game.stageID)
		{
			case STAGE_BOOK_SHOP:
			{
				if (GetState() >= 2)
				{
					SetVisible (false);
				}
			}
			break;
			case STAGE_RESTAURANT:
			{
				_paul = stage.FindActor("npc_paul");
				if (GetState() < 2 || _paul.GetState() < 2 || GetState() >= 5)
				{
					SetVisible (false);
				}
				if (GetState() < 5)
				{
					_item = stage.FindActor ("item_spare_dish");
					_item.SetEnabled (false);
					_item.SetVisible (false);
				}
			}
			break;
		}
	}
	
	function Quiet ()
	{
		if (game.stageID == STAGE_RESTAURANT)
			Actor_BlendKin (this, KIN_SIT_QUIET, KINMODE_LOOP);
		else
			Actor_BlendKin (this, KIN_QUIET, KINMODE_LOOP);
	}
	
	function Speak ()
	{
		if (game.stageID == STAGE_RESTAURANT)
			Actor_BlendKin (this, KIN_SIT_SPEAK, KINMODE_LOOP);
		else
			Actor_BlendKin (this, KIN_SPEAK, KINMODE_LOOP);
	}

	function OnDropItem (_itemName)
	{
		switch (_itemName)
		{
			case "item_red_book":
			{
				if (game.GetItemQuantity (_itemName) >= TOTAL_REDBOOKS)
				{
					_dlg = ShowAutoDialogue ("katty_2", 5, [game.GetPlayer(), this]);
					_dlg.AddNPCCall (game.GetPlayer(), "AddInventory", ["item_book_gift"]);
					_dlg.AddNPCCall (game.GetPlayer(), "AddTask", ["deliver_book_gift"]);
					_dlg.AddNPCCall (game.GetPlayer(), "TaskDone", ["deliver_red_books"]);
					SetState(2);	
					return true;	
				}
			}
			break;
			case "item_pepper": 
			case "item_garlic":
			{
				if (_itemName == "item_pepper") game.GetPlayer().TaskDone("deliver_pepper");
				else if (_itemName == "item_garlic") game.GetPlayer().TaskDone("deliver_garlic");

				if (GetState() >= 4)
				{
					_flag = 0;
					_st = game.GetLandmark ("katty_ingredients");
					if (_itemName == "item_pepper") _flag = 1;
					else if (_itemName == "item_garlic") _flag = 2;
					_st |= _flag;
					if (_flag)
					{
						game.AddLandmark ("katty_ingredients", _st);
					}
					if (_st == 3) // Ya están todos!
					{
						_dlg = ShowAutoDialogue ("katty_9", 1, [this, game.GetPlayer()]);
						//_dlg.AddNPCCall (stage.FindActor("item_spare_dish"), "SetEnabled", [true]);
						_dlg.AddNPCCall (game.GetPlayer(), "AddInventory", ["item_feather"]);
						_dlg.AddNPCCall (game.GetPlayer(), "AddTask", ["deliver_dish"]);
						SetState(5);
					}
					else // Falta alguno
					{
						ShowAutoDialogue ("katty_10", 1, [this, game.GetPlayer()]);		
					}
					return true;
				}
			}
			break;
		}	
		return false;
	}

	function OnCursorClick()
	{
		switch (GetState())
		{
			case 0: // Buscando los 20 libros, presentacion
			{
				_dlg = ShowAutoDialogue ("katty_1", 5, [this, game.GetPlayer()]);		
				_dlg.AddNPCCall (game.GetPlayer(), "AddTask", ["deliver_red_books"]);
				SetState(1);
			}
			break;
			case 1: // Buscando los 20 libros, ya presentados
			{
				ShowAutoDialogue ("katty_3", 3, [this, game.GetPlayer()]);		
			}
			break;
			case 2: // Ya con los 20 libros - fin en book_shop
			{
				if (game.stageID == STAGE_RESTAURANT)
				{
					SetState(3);
					OnCursorClick();
				}		
				else
				{
					ShowAutoDialogue ("katty_4", 1, [this, game.GetPlayer()]);
				}
			}
			break;
			case 3:  
			{
				_paul = stage.FindActor("npc_paul");
				if (_paul.GetState() < 4)
				{
					// Esperando que PAUL tunee su plato..
					ShowAutoDialogue ("katty_5", 1, [this, game.GetPlayer()]);
				}	
				else
				{
					_dlg = ShowAutoDialogue ("katty_6", 3, [game.GetPlayer(), this]);
					_dlg.AddNPCCall (game.GetPlayer(), "AddTask", ["deliver_pepper"]);
					_dlg.AddNPCCall (game.GetPlayer(), "AddTask", ["deliver_garlic"]);
					SetState(4);
				}	
			}
			break;
			case 4: // Esperando ajo y pimienta
			{
				ShowAutoDialogue ("katty_8", 3, [game.GetPlayer(), this]);
			}
			break;
			case 5: // fin
			{
				ShowAutoDialogue ("katty_9", 1, [this, game.GetPlayer()]);
			}
			break;
		}
	}
}